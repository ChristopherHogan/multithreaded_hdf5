#+TITLE: Internal MT Discussions
#+AUTHOR: Chris Hogan
#+STARTUP: nologdone

* MT Discussion <2020-05-22 Fri>
** Assumptions
*** Assuming no errors are encountered (Ignoring =HGOTO_ERROR=)
*** Assuming all initialization is complete before any thread calls H5Dread
    - Are there any packages/modules that might be initialized in H5Dread that
      are not already initialized in H5Fopen?
*** Assuming no thread is calling anything besides H5Dread
    - Main thread opens the file and datasets, then waits for workers to complete
    - Worker threads call H5Dread and return.
** Test Programs
*** File Creation
  #+begin_src python
  # Using hdf5 1.10.4
  file_params = {
      'name': 'test.h5',
      'mode': 'w',
      'libver': ('latest', 'latest')
  }
  f = h5py.File(**file_params)

  dset_size = 64 * 1024 * 1024
  arr = np.arange(dset_size)
  dset_names = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

  for name in dset_names:
      dset_params = {
          'name': name,
          'shape': (dset_size,),
          'dtype': 'i8',
          'data': arr
      }
      dset = f.create_dataset(**dset_params)

  f.close()
  #+end_src
    - Should I use develop to create the file?
*** Reader Program
  #+begin_src c
// main thread
   // allocate space for each read destination

   hid_t file_id = H5Fopen(file_name, H5F_ACC_RDONLY, H5P_DEFAULT);

   // for each dataset:
   hid_t dset_id = H5Dopen(file_id, dset_name, H5P_DEFAULT);

   // spawn worker threads
   // wait for workers to complete
   // for each dataset:
   H5Dclose(dset_id);
   
   // free memory
   
   H5Fclose(file_id);

// worker threads
   herr_t err = H5Dread(dset_id, H5T_STD_I64LE, H5S_ALL, H5S_ALL, H5P_DEFAULT, dest);
  #+end_src
*** HDF5 Build Options
    - Using develop branch
    - Disabling the free lists simplifies things, but then malloc/calloc/free
      account for over 1/3 of the CPU time.
    - NDEBUG will eliminate some code paths, but I probably want those extra diagnostics.
    - Are there any other options that can simplify things?
  #+begin_src bash
 CFLAGS="-ggdb3 -O0 -DNDEBUG"              \
   cmake                                   \
     -DCMAKE_INSTALL_PREFIX=${LOCAL}       \
     -DCMAKE_PREFIX_PATH=${LOCAL}          \
     -DCMAKE_BUILD_RPATH=${LOCAL}/lib      \
     -DCMAKE_INSTALL_RPATH=${LOCAL}/lib    \
     -DBUILD_SHARED_LIBS=ON                \
     -DBUILD_STATIC_LIBS=OFF               \
     -DHDF5_BUILD_CPP_LIB=OFF              \
     -DHDF5_BUILD_HL_LIB=OFF               \
     -DHDF5_ENABLE_THREADSAFE=ON           \
     -DHDF5_ENABLE_USING_MEMCHECKER=ON     \
     -DCMAKE_BUILD_TYPE=Debug              \
     ..
 #+end_src
** Shared Data Analysis for H5Dread
   - Methodical approach :: For each function and macro, and for each piece of
     data accessed therein, determine whether or not another thread inside
     H5Dread could possibly mutate that value.
   - Automated approach :: Could disable H5_HAVE_THREADSAFE and run with
     helgrind or thread sanitizer to get some idea of what state is shared.
   - A combination of the two seems best :: Do the methodical work, but verify
     with tools?
   - DONE :: Already thread safe, no work necessary
   - TODO :: Currently thread safe, but might change as we refine locks
   - FAIL :: Not thread safe. Definite work needed.
*** TODO FUNC_ENTER_API
**** TODO FUNC_ENTER_API_COMMON
***** DONE FUNC_ENTER_API_VARS
***** DONE H5_IS_API
***** DONE FUNC_ENTER_COMMON
****** DONE FUNC_ENTER_CHECK_NAME
***** TODO FUNC_ENTER_API_THREADSAFE
****** TODO H5_FIRST_THREAD_INIT
       - =H5TS_first_thread_init_g= is global, but it will only be modified by
         the main thread in =H5Fopen=. It's read-only to the workers.
****** TODO H5_API_UNSET_CANCEL
       - =H5TS_cancel_key_g= thread local cancellation counter
****** TODO H5_API_LOCK
       - =H5_g.init_lock= This will move deeper down the stack
**** DONE FUNC_ENTER_API_INIT
     - =H5_g.H5_libinit_g= The library is already initialized. read-only
     - =H5_g.H5_libterm_g= Only the main thread will terminate the library. read-only.
***** DONE H5_init_library()
      - Only called by main thread
***** DONE H5_PACKAGE_INIT
      - Main thread will initialize all packages
****** DONE H5D__init_package()
       - Main thread will initialzie all packages
***** DONE H5_PUSH_FUNC
      - Code stack disabled
***** DONE H5CX_push()
      - H5CX package is thread safe. Each thread has its own context.
      - Do we expect to refine any locks here, or is it granular enough?
***** DONE BEGIN_MPE_LOG
      - Disabled
**** DONE H5E_clear_stack(NULL) 
     - Thread local error stack
*** DONE H5TRACE6
    - Disabled
*** H5I_object_verify(dset_id, H5I_DATASET)
    - =H5I_next_type= static variable read, but in an assertion so NDEBUG would
      disable it. If we assume no new types are being created while worker
      threads are inside H5Dread, then it should be read-only, right?
      Mutated by:
        - DONE =H5Iregister_type=
**** H5I__find_id
***** DONE FUNC_ENTER_STATIC_NOERR
    - =H5I_id_type_list_g= Global array of types. Assuming no new types are
      created, this should be read-only.
      Mutated by:
        - DONE =H5I_term_package()= Only the main thread will terminate packages
        - TODO 
***** H5SL_search
****** FUNC_ENTER_NOAPI_NOINIT_NOERR
******* =if(H5SL_init_g || !(H5_g.H5_libterm_g))= 
****** slist->curr_level is read in H5SL_LOCATE_OPT
****** Iterates through the skip list nodes. Other threads could insert/delete nodes?
       - H5Dread probably doesn't modify property lists?
***** DONE FUNC_LEAVE_NOAPI
**** Returns H5I_id_info_t.obj_ptr as vol_obj, which is shared data
*** vol_obj is shared
*** H5P_LST_DATASET_XFER_ID_g is read
    - This shouldn't be an issue since it should already have been initialized
*** DONE H5CX_set_dxpl(dxpl_id)
*** H5VL_dataset_read
**** H5VL_set_vol_wrapper
***** H5CX_get_vol_wrap_ctx
      - Thread safe
***** H5VL__conn_inc_rc(vol_obj->connector)
      - =connector->nrefs++;= should this be atomic?
***** H5CX_set_vol_wrap_ctx(vol_wrap_ctx)
      - Thread safe

**** H5VL__dataset_read
***** H5VL__native_dataset_read
****** TODO: What is shared in H5D_t?
****** H5S_get_validated_dataspace // Returns const H5S_t*, so probably safe.
       - Since we're using H5S_ALL, this will always return NULL
****** H5D__read
******* FUNC_ENTER_PACKAGE_TAG(dataset->oloc.addr)
******** ...
******** H5AC_tag(dataset->oloc.addr, haddr_t MAXVAL)
********* H5CX_get_tag
          - Thread safe
********* H5CX_set_tag
          - Thread safe
******* file_space = mem_space = dataset->shared->space; // This appears to be shared
******* H5S_get_select_npoints(mem_space)
        - reads mem_space->select.num_elem
******* H5D__typeinfo_init
******** H5F_get_vol_obj(dset->oloc.file) -> dset->oloc.file->vol_obj
******** H5T_patch_vlen_file
         - reads and possibly writes dt->shared->u.vlen.file
         - reads dt->shared->type
******** H5I_object_verify
******** H5T_path_find
********* Modifies "path database" H5T_g
* MT Discussion <2020-05-26 Tue>
** Side Calls
*** H5Dread
**** H5I_object_verify
     - TODO Global lock
**** H5CX_set_dxpl
     - Thread safe
*** H5VL_dataset_read
**** H5VL_set_vol_wrapper
     - TODO Global lock
**** H5VL_reset_vol_wrapper
     - TODO Global lock
*** H5VL__dataset_read
*** H5VL__native_dataset_read
**** H5S_get_validated_dataspace
     - TODO Global lock
**** H5S_get_validated_dataspace
     - TODO Global lock
*** H5D__read
**** H5S_get_select_npoints
     - TODO Global lock
**** H5D__typeinfo_init
     - TODO Global lock
**** H5S_get_select_npoints
     - TODO Global lock
**** H5S_has_extent
     - TODO Global lock
**** H5S_has_extent
     - TODO Global lock
**** H5S_select_shape_same
     - TODO Global lock
**** H5S_get_simple_extent_ndims
     - TODO Global lock
**** H5S_get_simple_extent_ndims
     - TODO Global lock
**** TODO Branch not covered: H5Dio.c:485
**** H5D__contig_is_space_alloc
     - TODO Global lock
**** H5D__contig_is_data_cached
     - TODO Global lock
**** TODO Branch not covered: H5Dio.c:512
**** H5D__ioinfo_init
     - TODO Global lock
**** H5D__contig_io_init
     - TODO Global lock
**** H5D__typeinfo_term
     - TODO Global lock
*** H5D__contig_read
*** H5D__select_read
*** H5D__select_io
**** H5CX_get_vec_size
     - Thread safe
**** TODO Branch not covered: H5Dselect.c:135
**** H5S_select_iter_init
     - TODO Global lock
**** H5S_select_iter_init
     - TODO Global lock
**** TODO Branch not covered: H5Dselect.c:220
**** H5S_select_iter_get_seq_list
     - TODO Global lock
**** H5S_select_iter_get_seq_list
     - TODO Global lock
**** H5S_select_iter_release
     - TODO Global lock
**** H5S_select_iter_release
     - TODO Global lock
*** H5D__contig_readvv
**** H5F_shared_has_feature
     - TODO Global lock
*** H5VM_opvv
*** H5D__contig_readvv_sieve_cb
**** TODO Branch not covered: H5Dcontig.c:756
**** TODO Branch not covered: H5Dcontig.c:786
*** H5F_shared_block_read
**** H5F_addr_le
     - TODO Global lock
*** H5PB_read
**** TODO Branch not covered: H5PB.c:754 (skipped by HGOTO_DONE)
*** H5F__accum_read
**** TODO Branch not covered: H5Faccum.c:130
*** H5FD_read
**** dxpl_id = H5CX_get_dxpl();
     - Thread safe
**** H5FD_sec2_get_eoa
     - TODO Global lock, assuming this isn't a bug
*** H5DF_sec2_read
**** H5F_addr_defined
     - TODO Global lock
*** pread
** Shared Data in Main Path
*** H5Dread
*** H5VL_dataset_read(vol_obj, ...)
*** H5VL__dataset_read(vol_obj->data, vol_obj->connector->cls, ...)
**** read vol_obj->connector->cls->dataset_cls.read
*** H5VL__native_dataset_read(vol_obj->data, ...)
**** read vol_obj->data->oloc.file
*** H5D__read(vol_obj->data, ..., mem_space, file_space
**** read vol_obj->data->oloc.addr
**** file_space = mem_space = vol_obj->data->shared->space
**** read vol_obj->data->shared->dcpl_cache.efl.nused
**** read vol_obj->data->shared->layout.ops->is_space_alloc
**** read vol_obj->data->shared->layout.storage
**** read vol_obj->data->shared->layout.ops->is_data_cached
**** io_info.u.rbuf = buf;
**** io_info refers to several vol_obj->data members, set in H5D__ioinfo_init
***** io_info->dset = dset;
***** io_info->f_sh = H5F_SHARED(dset->oloc.file);
***** io_info->layout_ops = *dset->shared->layout.ops;
**** read io_info.layout_ops.io_init
**** read io_info.layout_ops.io_term
*** H5D__contig_read(io_info, type_info, nelmts, file_spce, mem_space, fm)
*** H5D__select_read(io_info, type_info, nelmts, file_space, mem_space)
*** H5D__select_io(io_info, type_info->src_type_size, nelmts, file_spce, mem_space)
**** read io_info->op_type
**** read io_info->layout_ops.readvv
*** H5D__contig_readvv(io_info, ...)
**** udata.f_sh = io_info->f_sh;
**** udata.dset_contig = &(io_info->dset->shared->cache.contig);
**** udata.store_contig = &(io_info->store->contig);
**** udata.rbuf = (unsigned char *)io_info->u.rbuf;
*** H5VM_opvv(..., udata)
*** H5D__contig_readvv_sieve_cb(..., udata)
**** H5F_shared_t *f_sh = udata->f_sh;
**** H5D_rdcdc_t *dset_contig = udata->dset_contig;
**** const H5D_contig_storage_t *store_contig = udata->store_contig;
**** read dset_contig->sieve_buf
**** read dset_contig->sieve_loc
**** read dset_contig->sieve_size
**** read store_contig->dset_addr
**** buf = udata->rbuf + src_off;
*** H5F_shared_block_read(f_sh, ...)
*** H5PB_read(f_sh, ...)
**** page_buf = f_sh->page_buf;
*** H5F__accum_read(f_sh, ...)
**** file = f_sh->lf;
*** H5FD_read(file, ...)
**** read file->access_flags
**** read file->base_addr
**** read file->cls->read
*** H5FD_sec2_read(file, ...)
**** write file->pos = addr; => vol_obj->data->oloc.file->shared->lf
**** write file->op = OP_READ; => vol_obj->data->oloc.file->shared->lf
*** pread(file->fd, ...)
** Next Steps
*** DONE Move global lock acquisition from FUNC_ENTER_API to the non-api FUNC_ENTER* macros
**** DONE FUNC_ENTER_API_NOLOCK
**** DONE FUNC_ENTER_NOAPI_THREADSAFE
**** DONE FUNC_ENTER_NOAPI_NOERR_THREADSAFE
**** DONE FUNC_ENTER_NOAPI_NOINIT_THREADSAFE
**** DONE FUNC_ENTER_NOAPI_NOINIT_NOERR_THREADSAFE
**** DONE FUNC_ENTER_STATIC_THREADSAFE
**** DONE FUNC_ENTER_STATIC_NOERR_THREADSAFE
**** DONE FUNC_ENTER_PACKAGE_NOERR_THREADSAFE
*** DONE Move global lock release from FUNC_LEAVE_API to non-api FUNC_LEAVE* macros
**** DONE FUNC_LEAVE_API_NOLOCK
**** DONE FUNC_LEAVE_NOAPI_THREADSAFE
*** TODO Refine lock granularity
**** DONE Try no locks at all
* MT Discussion <2020-05-28 Thu>
** Profile Results
*** develop branch with 8 threads
*** Global lock around each side call, 8 threads
*** No lock at all in H5Dread
** Mutated Shared Data
*** Main Path
**** H5FD_sec2_read(file, ...)
***** write file->pos = addr; => vol_obj->data->oloc.file->shared->lf
***** write file->op = OP_READ; => vol_obj->data->oloc.file->shared->lf
*** Side Calls
**** H5VL_dataset_read(vol_obj, ...)
***** H5VL_set_vol_wrapper(vol_obj)
****** H5VL__conn_inc_rc(vol_obj->connector);
******** write connector->nrefs++;
***** H5VL_reset_vol_wrapper(vol_obj)
****** H5VL__free_vol_wrapper(vol_wrap_ctx)
******* H5VL__conn_dec_rc(vol_wrap_ctx->connector)
******** write connector->nrefs--; => vol_obj->connector
** Possible Bug?
   - H5FDint.c:186
** Next Steps
* MT Discussion <2020-06-19 Fri>
** Test program
   - 8 threads simultaneously open 8 datasets
   - barrier
   - 8 threads simultaneously read 8 datasets
   - barrier
   - 8 threads simultaneously close 8 datasets
** H5Dopen2
*** DONE Side Calls locked
**** H5Dopen2
***** H5CX_set_apl
***** H5I_object
***** H5VL_register
**** H5VL_dataset_open
***** H5VL_set_vol_wrapper
***** H5VL_reset_vol_wrapper
**** H5VL__dataset_open
**** H5VL__native_dataset_open
***** H5G_loc_real
**** H5D__open_name
***** H5G_loc_reset
***** H5G_loc_find
***** H5O_obj_type
***** H5G_loc_free
**** H5D_open
***** H5O_loc_copy_shallow
***** H5G_name_copy
***** H5D__build_file_prefix
***** H5D__build_file_prefix
***** H5FO_opened
***** H5FO_insert
***** H5FO_top_incr
**** H5D__open_oid
***** H5AC_tag
***** H5D__new
***** H5O_open
***** H5O_msg_read
***** H5T_set_loc
***** H5S_read
***** H5D__cache_dataspace_info
***** H5I_register
***** H5I_object
***** H5D__layout_oh_read
***** H5D__append_flush_setup
***** H5O_msg_exists
***** H5O_msg_read
***** H5P_fill_value_cmp
***** H5F_get_intent
***** H5AC_tag
*** TODO Shared data in main path
**** Mostly done. No issues reported by Helgrind.
** H5DClose
*** DONE Side Calls locked
**** H5Dclose
***** H5I_get_type
**** H5I_dec_app_ref_always_close
**** H5I_dec_app_ref
**** H5I_dec_ref
***** H5I__find_id
***** H5I__remove_common
**** H5D__close_cb
***** H5VL_free_object
**** H5VL_dataset_close
***** H5VL_set_vol_wrapper
***** H5VL_reset_vol_wrapper
**** H5VL__dataset_close
**** H5VL__native_dataset_close
**** H5D_close
***** H5D__flush_real
***** H5O_msg_reset
***** H5AC_cork
***** H5I_dec_ref
***** H5S_close
***** H5FO_top_decr
***** H5FO_delete
***** H5O_close
***** H5G_name_free
*** TODO Shared data in main path
**** Mostly done. No issues reported by Helgrind.
** Next Steps
*** Logged 55 hours so far (about 25 hours left?)
*** TODO H5Dopen, H5Dread, H5Dclose (8 threads, one dataset)
*** TODO H5Dwrite (8 threads, 8 datasets)
*** TODO H5Dwrite (8 threads, 1 datasets)
*** TODO Nested datasets down the group hierarchy
*** TODO Each dataset in a separate group (below root)
